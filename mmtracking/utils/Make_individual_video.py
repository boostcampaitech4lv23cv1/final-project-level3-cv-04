
import argparse
import cv2
import os
import os.path as osp
import glob
from pathlib import Path
import re
from tqdm import tqdm


def atoi(text):
    return int(text) if text.isdigit() else text


def natural_keys(text):
    '''
    alist.sort(key=natural_keys) sorts in human order
    http://nedbatchelder.com/blog/200712/human_sorting.html
    (See Toothy's implementation in the comments)
    '''
    return [ atoi(c) for c in re.split(r'(\d+)', text) ]



def padding(img, set_size):
    try:
        h,w,c = img.shape
    except:
        print('shape error')
        raise
    # if widthÍ∞Ä heightÎ≥¥Îã§ Îçî ÌÅ¨Î©¥
    if h<w: 
        # set_sizeÎ•º ÏÉàÎ°úÏö¥ widthÎ°ú ÏÑ†Ïñ∏
        new_width = set_size 
        # Í∏∞Ï°¥ ratioÏóê ÎßûÎèÑÎ°ù new_height ÏÑ†Ïñ∏
        new_height = int(new_width * (h/w)) 
    else:
        new_height = set_size
        new_width = int(new_height*(w/h))

    # set_sizeÍ∞Ä Îçî ÌÅ¥ Í≤ΩÏö∞
    if max(h,w) < set_size:
        # new_width, new_heightÎ°ú ÎßûÏ∂§ cubicÏúºÎ°ú Î≥¥Í∞Ñ
        img = cv2.resize(img, (new_width, new_height), cv2.INTER_CUBIC)
    else:
        img = cv2.resize(img, (new_width, new_height), cv2.INTER_AREA)
    
    # Îã§Ïãú ÌôïÏù∏
    try:
        h,w,c = img.shape
    except:
        print("file error")
        raise

    delta_h = set_size - h # height Ìå®Îî© pixel
    delta_w = set_size - w # width Ìå®Îî© pixel
    top, bottom = delta_h//2, delta_h-(delta_h//2) # height Ï¶ùÍ∞ÄÎüâ
    left, right = delta_w//2, delta_w-(delta_w//2) # width Ï¶ùÍ∞ÄÎüâ
    # Ìå®Îî©
    new_img = cv2.copyMakeBorder(img, 
                                 top, 
                                 bottom, 
                                 left, 
                                 right,
                                 cv2.BORDER_CONSTANT,
                                 value=[0,0,0])
    return new_img

def make_mp4(target_dir, output_dir):
    # output each person dirÍ≥º ÏÉÅÏúÑ dirÏùÑ ÏÉùÏÑ±
    for people_id in sorted(os.listdir(target_dir)):
        os.makedirs(osp.join(output_dir, people_id), exist_ok=True)

    # each person(person_id)Ïùò dirÏóê Î∞©Î¨∏
    # each person(person_id)Ïùò video ÏÉùÏÑ±
    for people_id in tqdm(os.listdir(target_dir)):
        print(osp.join(target_dir, people_id))
        person_img_paths =  [ osp.join(target_dir,people_id,i) for i in os.listdir(osp.join(target_dir, people_id)) ]
        
        # Ïò§Î¶ÑÏ∞®Ïàú Ï†ïÎ†¨
        person_img_paths.sort(key=natural_keys)

        img_array = []
        heights = []
        widths = []
        frames_array = []

        # Ïù¥ÎØ∏ÏßÄÎì§ÏùÑ ÎèåÎ©¥ÏÑú img_arrayÏóê Ï†ÄÏû•ÌïúÎã§.
        for path in person_img_paths:
            img = cv2.imread(path)
            height, width, _ = img.shape
            # Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû•Í≥º ÎèôÏãúÏóê frame Î≤àÌò∏Î•º Î¶¨Ïä§Ìä∏Ïóê Ï†ÄÏû•ÌïúÎã§
            img_array.append(img)
            frames_array.append(osp.basename(path).split("_")[1].split(".")[0])
            heights.append(height)
            widths.append(width)

        max_height = max(heights) # height ÏµúÎåÄÍ∞í
        max_width = max(widths) # width ÏµúÎåÄÍ∞í
        max_squre = max([max_height, max_width]) # height, width Ï§ë Ïùò ÏµúÎåÄÍ∞í
        out = cv2.VideoWriter(f"{output_dir}/{people_id}.avi", # Ïó¨Í∏∞ÏóêÎã§Í∞Ä
                              cv2.VideoWriter_fourcc(*'DIVX'), # Ïñ¥Îñ§ ÏñëÏãùÏúºÎ°ú
                              24, # fpsÎäî Ïù¥Í≤ÉÏúºÎ°ú
                              (max_squre, max_squre)) # height, width
        
        # Î™®Îì† Ïù¥ÎØ∏ÏßÄÎì§Ïóê Ìå®Îî©ÏùÑ ÌïúÎã§
        for img, frame_no in zip(img_array,frames_array):
            
            # ÌïòÎÇòÏî© videoÎ•º ÎßåÎì§Í≥†
            img = padding(img, max_squre)
            out.write(img)

            # üê¨ ÏãúÍ∞ÑÏù¥ ÎÑàÎ¨¥ Í∏∏Ïñ¥ÏÑú Ï£ºÏÑùÏ≤òÎ¶¨
            # Ìå®Îî©Ï≤òÎ¶¨Îêú Ïù¥ÎØ∏ÏßÄÎì§ÏùÑ ÌïòÎÇòÏî© outputdirÏóê Î≥µÏÇ¨ÌïúÎã§. Ïù¥Î¶ÑÏùÄ {people_id}_{order}.jpg (ex)1_1.jpg
            # copy_dir = osp.join(output_dir, people_id, str(people_id) + "_" + frame_no + ".jpg") 
            # cv2.imwrite(copy_dir, img)
        
        out.release()
    return None

def get_args_parser():
    parser = argparse.ArgumentParser('Deformable DETR Detector', add_help=False)
    parser.add_argument('--target_dir', default="./runs/track/input_strongsort_sample_conf_640_crop/crops/person", type=str)
    parser.add_argument('--output_dir', default="./video_output", type=str)
    return parser

if __name__ == "__main__":
    parser = argparse.ArgumentParser('from jpg root to mp4', parents=[get_args_parser()])
    args = parser.parse_args()
    # argumentÎì§ Ï∂úÎ†•
    for arg in vars(args):
        print("--"+arg, getattr(args, arg))
    
    make_mp4(args.target_dir, args.output_dir)