import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), "face_embedding"))
import face_embedding
from glob import glob
import cv2
from tqdm import tqdm
import pandas as pd
import natsort
import numpy as np

def img_padding(img,px,mx,py,my,w,h):   #top, bottom, left, right
    if px > w:
        img = cv2.copyMakeBorder(img, 0,0,0,px-w,cv2.BORDER_CONSTANT)   
    if mx < 0:
        img = cv2.copyMakeBorder(img, 0,0,-mx,0,cv2.BORDER_CONSTANT)
        px = px - mx
        mx = 0
    if py > h:
        img = cv2.copyMakeBorder(img, 0,py-h,0,0,cv2.BORDER_CONSTANT)  
    if my < 0:
        img = cv2.copyMakeBorder(img, -my,0,0,0,cv2.BORDER_CONSTANT)
        py = py - my
        my = 0
        
    return img,px,mx,py,my

def video_generator(df1,meta_info,member,pred,full_video=True):
    '''
    input
        df1 : filename,bbox,track_id
        meta_info : imagepath, image width, height Ï†ïÎ≥¥
        member(strÌòï) : userÍ∞Ä ÏõêÌïòÎäî member
        pred : predictor Í±∞Ï≥êÏÑú ÎÇòÏò® prediction -> Íµ¨Ï°∞: pred = {'track_id' : 'aespa_karina'}
        full_video(boolean) ->  True  : ex) Ïπ¥Î¶¨ÎÇò ÏóÜÎäî Î∂ÄÎ∂ÑÏùÄ Ï†ÑÏ≤¥ÌôîÎ©¥ÏúºÎ°ú
                                False : ex) Ïπ¥Î¶¨ÎÇò ÏóÜÎäî Î∂ÄÎ∂ÑÏùÄ skip

    output
        ÏñºÍµ¥ Ï¢åÌëú Í≥†Î†§Ìï¥ÏÑú Ìï≠ÏÉÅ Ï†ïÏ§ëÏïôÏóê Ïò¨ Ïàò ÏûàÍ≤å + ÏÉÅÎ∞òÏã† Î≥¥Ïù¥Í≤å cropÌï¥ÏÑú
        outputÏúºÎ°ú .mp4ÌååÏùº ÎÇ¥Î±âÏùå
    '''
    
    ######################################################
    crop_img_w = 16 # Ï†ÑÏ≤¥ Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞ Ï°∞Ï†à(Í∞ÄÎ°ú)
    crop_img_h = 9 #Ï†ÑÏ≤¥ Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞ Ï°∞Ï†à(ÏÑ∏Î°ú)
    video_size_w = 1280 # ÏµúÏ¢Ö video ÌÅ¨Í∏∞ (Í∞ÄÎ°ú)
    video_size_h = 720  # ÏµúÏ¢Ö video ÌÅ¨Í∏∞ (ÏÑ∏Î°ú)
    #ÏñºÍµ¥ÏùÑ ÌôîÎ©¥ Ïñ¥ÎîîÏóê ÎëòÏßÄ ÎπÑÏú® Ï°∞Ï†ï(ÏÑ∏Î°úÎßå Ï°∞Ï†ï Í∞ÄÎä•, Ïà´ÏûêÍ∞Ä ÎÇÆÏùÑ ÏàòÎ°ù ÏñºÍµ¥ ÏúÑÎ°ú Ïò¨ÎùºÍ∞ê)
    face_loc = 3
    newfolder = './result/' + meta_info["image_root"].split('/')[-1] + '/img/'  # ÏÇ¨ÏßÑ Ï†ÄÏû•Ìï† Ìè¥Îçî
    video_path = './result/' + meta_info["image_root"].split('/')[-1] + '/video/'   # ÎπÑÎîîÏò§ Ï†ÄÏû•Ìï† Ìè¥Îçî
    frame = meta_info["fps"]  # ÎπÑÎîîÏò§ ÌîÑÎ†àÏûÑ
    os.makedirs(newfolder,exist_ok=True)
    os.makedirs(video_path,exist_ok=True)
    ######################################################   
    prev_px = 0
    prev_mx = 0
    prev_py = 0
    prev_my = 0
    
    df1['track_id'].fillna(-1, inplace=True)
    df1['track_id'] = df1['track_id'].map(lambda x: int(x))
    
    #Ïù¥ÎØ∏ÏßÄ Ï£ºÏÜå
    img_list = glob(meta_info["image_root"]+'/*.jpg')
    img_list = natsort.natsorted(img_list)
    
    print('video_generatorÏã§ÌñâÏ§ë')
    
    for idx,img_path in enumerate(img_list, start=1):
        # print(img_path)
        filename_df = df1[df1['filename']== img_path.split('/')[-1]]    #ÌååÏùºÎ™ÖÏù¥ Í∞ôÏùÄ Ïï†Îì§ÎÅºÎ¶¨ dfÌïòÎÇò ÎßåÎì§Ïñ¥Ï£ºÍ≥†
        count = 0
        for row in filename_df.itertuples():
            if pred[row.track_id] == member: # Ìï¥Îãπ member ÏÇ¨ÏßÑÏù¥ ÏûàÏúºÎ©¥
                count += 1
                x_min = int(row.track_body_xmin)
                x_max = int(row.track_body_xmax)
                y_max = int(row.track_body_ymax)
                y_min = int(row.track_body_ymin)
                # print('bboxÏ¢åÌëú : ',x_min,',',x_max,',',y_min,',',y_max)
                
                # retinafaceÎ°ú ÏñºÍµ¥ Ï¢åÌëú Íµ¨ÌïòÍ∏∞
                temp_img = cv2.imread(img_path)
                temp_img = temp_img[y_min:y_max, x_min:x_max]
                         
                ### face embeddingÏóêÏÑú ÏñºÍµ¥Ïù¥ ÏûàÎäî Í≤ΩÏö∞ÏôÄ ÏóÜÎäî Í≤ΩÏö∞Î°ú ÎÇòÎà†Ïïº Ìï®
                face_embedding_result = face_embedding.detect_face(temp_img)
                del temp_img    #temp_img Î©îÎ™®Î¶¨ Ìï†Îãπ Ìï¥Ï†ú
                
                if len(face_embedding_result) == 2:   # ÏñºÍµ¥Ïù¥ ÏóÜÎäî Í≤ΩÏö∞
                    ## prev Ï¢åÌëúÍ∞Ä 0,0Ïù∏ Í≤ΩÏö∞ -> Ï†ÑÏ≤¥ÌôîÎ©¥
                    if prev_px == 0 and prev_py == 0:
                        count -= 1
                        break
                    ## Í∑∏ Ïô∏ -> Ïù¥Ï†Ñ Ï¢åÌëú Í∞í Î∂àÎü¨Ïò§Í∏∞
                    else:
                        px = prev_px
                        mx = prev_mx
                        py = prev_py
                        my = prev_my
                
                else:   # ÏñºÍµ¥Ïù¥ ÏûàÎäî Í≤ΩÏö∞
                    face_x_min,face_y_min,face_x_max,face_y_max = face_embedding_result[0][0],face_embedding_result[0][1],face_embedding_result[0][2],face_embedding_result[0][3]
                    face_x_min,face_y_min,face_x_max,face_y_max = face_x_min+x_min,face_y_min+y_min,face_x_max+x_min,face_y_max+y_min#ÏñºÍµ¥Ï¢åÌëú         
                    center_x = (face_x_max + face_x_min) / 2   #ÏñºÍµ¥ Ï§ëÏã¨ xÏ¢åÌëú
                    center_y = (face_y_max + face_y_max) / 2   #ÏñºÍµ¥ Ï§ëÏã¨ yÏ¢åÌëú
                
                    face_w = face_x_max - face_x_min    # ÏñºÍµ¥ Í∞ÄÎ°ú Í∏∏Ïù¥
                    face_h = face_y_max - face_y_min    # ÏñºÍµ¥ ÏÑ∏Î°ú Í∏∏Ïù¥
                    px = int(center_x + (face_h/2) * (crop_img_w/2)) # x plus Î∞©Ìñ• (Ïò§Î•∏Ï™Ω)
                    mx = int(center_x - (face_h/2) * (crop_img_w/2)) # x minus Î∞©Ìñ• (ÏôºÏ™Ω)
                    py = int(center_y + (face_h/2) * (crop_img_h - face_loc))  # y plus Î∞©Ìñ• (ÏïÑÎûò)
                    my = int(center_y - (face_h/2) * (face_loc))  # y minus Î∞©Ìñ• (ÏúÑ)
                    prev_px = px
                    prev_mx = mx
                    prev_py = py
                    prev_my = my
                    
                img = cv2.imread(img_path)  #Ïù¥ÎØ∏ÏßÄ Î∂àÎü¨ÏôÄÏÑú ÏñºÍµ¥ Ï¢åÌëú Íµ¨Ìï®
                h, w, _ = img.shape # Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞ Î∞õÍ∏∞
                # ÏÇ¨ÏßÑ padding
                if px > w or mx < 0 or py > h or my < 0: # ÏÇ¨ÏßÑ Î≤îÏúÑ Î≤óÏñ¥ÎÇòÎ©¥
                    img,px,mx,py,my = img_padding(img,px,mx,py,my,w,h)
                    
                # ÏÇ¨ÏßÑ crop
                cropped_img = img[my:py, mx:px]
                del img     #img Î©îÎ™®Î¶¨ Ìï†Îãπ Ìï¥Ï†ú
                
                # Ïù¥ÎØ∏ÏßÄ resize
                #interpolation : Í∏∞Î≤ï Îã§Î•∏Í±∞Î°ú Î∞îÍøîÏÑú ÌíàÏßà, ÏÜçÎèÑ Ï°∞Ï†à Í∞ÄÎä•
                resize_img = cv2.resize(cropped_img,(video_size_w,video_size_h),interpolation=cv2.INTER_CUBIC)
                del cropped_img # cropped_img Î©îÎ™®Î¶¨ Ìï†Îãπ Ìï¥Ï†ú
                # Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû•
                cv2.imwrite(newfolder+str(idx)+'.jpg', resize_img)
                del resize_img  #resize_img Î©îÎ™®Î¶¨ Ìï†Îãπ Ìï¥Ï†ú

                break
        del filename_df # Îç∞Ïù¥ÌÑ∞ ÌîÑÎ†àÏûÑ Î©îÎ™®Î¶¨ Ìï†Îãπ Ìï¥Ï†ú 
        
        if count == 0 & full_video:
            # Ïù¥ÎØ∏ÏßÄ resize
            #interpolation : Ï†ÑÏ≤¥ÏÇ¨ÏßÑÏù¥Îùº ÎÑ£ÏßÄ ÏïäÏùå
            img = cv2.imread(img_path)
            resize_img = cv2.resize(img,(video_size_w,video_size_h))

            # Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû•
            cv2.imwrite(newfolder+str(idx)+'.jpg', resize_img)  

            del img
            del resize_img   
           
    
    del df1 # df1 Îç∞Ïù¥ÌÑ∞ÌîÑÎ†àÏûÑ Î©îÎ™®Î¶¨ Ìï†Îãπ Ìï¥Ï†ú
    del img_list    #Ìï®ÏàòÏóêÏÑú Î∞õÏùÄ img_list Î©îÎ™®Î¶¨ Ìï†Îãπ Ìï¥Ï†ú
    
    #video ÏÉùÏÑ± -> out Î∂ÄÎ∂ÑÏùÑ ÏúÑÎ°ú Ïò¨Î¶¨Î©¥ ÎÇòÏ§ëÏóê forÎ¨∏ ÌïúÎ≤à ÏïÑÎÇÑ Ïàò ÏûàÍ≥† ÏÇ¨ÏßÑÎèÑ Ï†ÄÏû• ÏïàÌï¥ÎèÑ Îê®
    print('video ÏÉùÏÑ±Ï§ë...')
    img_list = glob(newfolder+"*.jpg")
    img_list = natsort.natsorted(img_list)
    
    # üôèüèª fourcc = cv2.VideoWriter_fourcc(*'MP4V') -> cv2.VideoWriter_fourcc(*'H264')
    out = cv2.VideoWriter(video_path+member+'_output.mp4',cv2.VideoWriter_fourcc(*'H264'),frame,(video_size_w,video_size_h))
    for path in img_list:
        img = cv2.imread(path)
        out.write(img)
    out.release()
    
    video_full_path = video_path+member+'_output.mp4'
    return video_full_path # üôèüèª video_full_path return